version: '3.8'

services:
  whaleradar:
    build: .
    container_name: whaleradar-main
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - health-api
    networks:
      - whaleradar-network

  health-api:
    build: .
    container_name: whaleradar-health
    restart: unless-stopped
    command: python -m src.api.health
    env_file:
      - .env
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - whaleradar-network

  prometheus:
    image: prom/prometheus:latest
    container_name: whaleradar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - whaleradar-network

  grafana:
    image: grafana/grafana:latest
    container_name: whaleradar-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - whaleradar-network

networks:
  whaleradar-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: